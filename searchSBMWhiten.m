function [thetaHat, inrprod, runtime] = searchSBMWhiten(A,v,K,p,q,tau,fplot)
% --------------------------------------------------------------------------
% Main function to search a single community in a graph generated by a stochastic
% block model
%
% Author: Avik Ray (avik@utexas.edu)
%
% Input params:
% A: Adjacency matrix
% v: Search/side-information vector
% K: Number of communities
% p: intra-community edge probability
% q: inter-community edge probability
% tau: detection threshold
% fplot: flag to output plot
%
% Output params:
% thetaHat: Estimated target community membership vector
% inrprod: Estimated target community mean/center vector
% runtime: Algo runtime
%
% Example:
% [thetaHat, inrprod, runtime] = searchSBMWhiten(A,v,10,.15,.01,.05,1);
% --------------------------------------------------------------------------

tic;
n = size(A,1);

if (p==0)&&(q==0)
    % Estimate p,q,k if not provided
    [phat, qhat] = spectralEstEdgeProb(A);
    disp(['Estimated p = ' num2str(phat) ', q = ' num2str(qhat)]);
    p = phat;
    q = qhat;
end

% Compute A1, A2, B, m1
A1 = (A + p*eye(n))/sqrt(n);
A2 = (A + p*eye(n))/sqrt(n);
m1 = sum(A+p*eye(n),2)/n;

weights = v'*(A+p*eye(n));
B = A1*diag(weights)*A2';

% Estimate mu1
[mu1, alpha1] = WhiteningSubroutineSBM(A1,A2,B,m1,K);

% Estimate community
thetaHat = zeros(n,1);
inrprod = mu1;
for i = 1:n
    if inrprod(i) > tau
        thetaHat(i) = 1;
    end
end
runtime = toc;
% Plot
if fplot
    close all hidden;
    figure; stem(mu1); grid on;
    figure; stem(inrprod); grid on;
end

end